§== Comments.end-of-line comment == map:cl, sc:e, append ==
§# <CURSOR>
== Comments.frame == map:cfr, sc:f  ==
# <CURSOR>
== Comments.function == map:cfu, sc:f  ==
=func |?FUNCTION_NAME|

<CURSOR>

=cut

sub |?FUNCTION_NAME| {
    my () = @_;
}

== Comments.method == map:cme, sc:m  ==
=method |?METHODNAME|

<CURSOR>

=cut

sub |METHODNAME| {
    my ($self) = @_;
}

== Comments.dancer_route == map:dr, sc:f  ==
|?METHOD| '|?ROUTE|' => sub {
    <CURSOR>
};

== Comments.method == map:cme, sc:m  ==
=method |?METHODNAME|

<CURSOR>

=cut

sub |METHODNAME| {
    my ($self) = @_;
}


== Comments.file description pl == map:chpl, sc:d, start, noindent ==
#!/usr/bin/env perl 
#PODNAME: |?PODNAME|
#ABSTRACT: <CURSOR>

use strict;
use warnings;


== Comments.file description pm == map:chpm, sc:d, start, noindent ==
package |?CLASSNAME|;
#ABSTRACT: <CURSOR>

=head1 DESCRIPTION



=cut

use strict;
use warnings;
 

1;
== Comments.file description t == map:cht, sc:d, start, noindent ==
# |FILENAME|

use strict;
use warnings;
use Test::More;

<CURSOR>

done_testing;
== Comments.file description pod == map:chpo, sc:d, start ==
=pod

=head1 NAME

<CURSOR>

=head1 DESCRIPTION

=cut
== Comments.date == insert, map:cd, sc:d ==
|DATE|<CURSOR>
== Comments.date+time == insert, map:ct, sc:t ==
|DATE| |TIME|<CURSOR>
== ENDTEMPLATE ==

== LIST: comments_keywords == hash ==
  'BUG'         : ':BUG       :|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
  'TODO'        : ':TODO      :|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
  'WARNING'     : ':WARNING   :|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
  'WORKAROUND'  : ':WORKAROUND:|DATE| |TIME|:|AUTHORREF|: <CURSOR>',
  'new keyword' : ':<CURSOR>:|DATE| |TIME|:|AUTHORREF|: {+COMMENT+}',
== LIST: comments_macros == hash ==
  'AUTHOR'       : '|AUTHOR|',
  'AUTHORREF'    : '|AUTHORREF|',
  'COMPANY'      : '|COMPANY|',
  'COPYRIGHT'    : '|COPYRIGHT|',
  'EMAIL'        : '|EMAIL|',
  'ORGANIZATION' : '|ORGANIZATION|',
== ENDLIST ==

== Comments.keyword comments == expandmenu, append, map:ck, sc:k ==
|PickList( 'keyword comment', 'comments_keywords' )|
 # |PICK|
== Comments.macros == expandmenu, insert, map:cma, sc:m ==
|PickList( 'macro', 'comments_macros' )|
|PICK|<CURSOR>
== ENDTEMPLATE ==
